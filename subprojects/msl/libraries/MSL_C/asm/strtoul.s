	.include "macros/function.inc"
	.include "include/strtoul.inc"

	.extern errno

	.text


	arm_func_start __strtoul
__strtoul: ; 0x020DA458
	stmfd sp!, {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc
	ldr r4, [sp, #0x38]
	movs sb, r0
	ldr r0, [sp, #0x34]
	str r4, [sp, #0x38]
	mov r4, #0
	str r0, [sp, #0x34]
	ldr r0, [sp, #0x38]
	str r1, [sp]
	str r4, [r0, #0]
	mov r0, r4
	str r0, [sp, #4]
	ldr r0, [sp, #0x34]
	mov r1, r4
	str r1, [r0, #0]
	ldr r0, [sp, #0x30]
	str r4, [sp, #8]
	mov r8, r2
	mov r7, r3
	mov r5, r4
	mov sl, r4
	str r0, [sp, #0x30]
	mov r4, #1
	bmi _020DA4D8
	cmp sb, #1
	beq _020DA4D8
	cmp sb, #0x24
	bgt _020DA4D8
	ldr r0, [sp]
	cmp r0, #1
	bge _020DA4E0
_020DA4D8:
	mov r4, #0x40
	b _020DA4FC
_020DA4E0:
	ldr r1, [sp, #8]
	mov r0, r7
	mov r3, r1
	mov r2, r1
	add r5, r3, #1
	blx r8
	mov r6, r0
_020DA4FC:
	cmp sb, #0
	beq _020DA514
	mov r1, sb
	mvn r0, #0
	bl _u32_div_f
	str r0, [sp, #4]
_020DA514:
	mvn fp, #0
	b _020DA7D4
_020DA51C:
	cmp r4, #8
	bgt _020DA554
	cmp r4, #0
	addge pc, pc, r4, lsl #2
	b _020DA7D4
_020DA530: ; jump table
	b _020DA7D4 ; case 0
	b _020DA560 ; case 1
	; b _020DA60C
	.word 0xea000033
	b _020DA7D4 ; case 3
	; b _020DA648
	.word 0xea000040
	b _020DA7D4 ; case 5
	b _020DA7D4 ; case 6
	b _020DA7D4 ; case 7
	b _020DA688 ; case 8
_020DA554:
	cmp r4, #0x10
	beq _020DA688
	b _020DA7D4
_020DA560:
	.byte 0x00, 0x00, 0x56, 0xE3, 0x01, 0x00, 0x00, 0xBA, 0x80, 0x00, 0x56, 0xE3, 0x01, 0x00, 0x00, 0xBA
	.byte 0x00, 0x00, 0xA0, 0xE3, 0x03, 0x00, 0x00, 0xEA, 0xB8, 0x02, 0x9F, 0xE5, 0x86, 0x10, 0xA0, 0xE1
	.byte 0xB1, 0x00, 0x90, 0xE1, 0x01, 0x0C, 0x00, 0xE2, 0x00, 0x00, 0x50, 0xE3, 0x08, 0x00, 0x00, 0x0A
	.byte 0x00, 0x10, 0xA0, 0xE3, 0x07, 0x00, 0xA0, 0xE1, 0x01, 0x20, 0xA0, 0xE1, 0x38, 0xFF, 0x2F, 0xE1
	.byte 0x00, 0x60, 0xA0, 0xE1, 0x08, 0x00, 0x9D, 0xE5, 0x01, 0x00, 0x80, 0xE2, 0x08, 0x00, 0x8D, 0xE5
	.byte 0x87, 0x00, 0x00, 0xEA, 0x2B, 0x00, 0x56, 0xE3, 0x06, 0x00, 0x00, 0x1A, 0x00, 0x10, 0xA0, 0xE3
	.byte 0x07, 0x00, 0xA0, 0xE1, 0x01, 0x20, 0xA0, 0xE1, 0x01, 0x50, 0x85, 0xE2, 0x38, 0xFF, 0x2F, 0xE1
	.byte 0x00, 0x60, 0xA0, 0xE1, 0x0A, 0x00, 0x00, 0xEA, 0x2D, 0x00, 0x56, 0xE3, 0x08, 0x00, 0x00, 0x1A
	.byte 0x00, 0x10, 0xA0, 0xE3, 0x07, 0x00, 0xA0, 0xE1, 0x01, 0x20, 0xA0, 0xE1, 0x01, 0x50, 0x85, 0xE2
	.byte 0x38, 0xFF, 0x2F, 0xE1, 0x00, 0x60, 0xA0, 0xE1, 0x34, 0x00, 0x9D, 0xE5, 0x01, 0x10, 0xA0, 0xE3
	.byte 0x00, 0x10, 0x80, 0xE5, 0x02, 0x40, 0xA0, 0xE3, 0x71, 0x00, 0x00, 0xEA, 0x00, 0x00, 0x59, 0xE3
	.byte 0x10, 0x00, 0x59, 0x13, 0x09, 0x00, 0x00, 0x1A, 0x30, 0x00, 0x56, 0xE3, 0x07, 0x00, 0x00, 0x1A
	.byte 0x00, 0x10, 0xA0, 0xE3, 0x07, 0x00, 0xA0, 0xE1, 0x01, 0x20, 0xA0, 0xE1, 0x04, 0x40, 0xA0, 0xE3
	.byte 0x01, 0x50, 0x85, 0xE2, 0x38, 0xFF, 0x2F, 0xE1, 0x00, 0x60, 0xA0, 0xE1, 0x64, 0x00, 0x00, 0xEA
	.byte 0x08, 0x40, 0xA0, 0xE3, 0x62, 0x00, 0x00, 0xEA, 0x58, 0x00, 0x56, 0xE3, 0x78, 0x00, 0x56, 0x13
	.byte 0x08, 0x00, 0x00, 0x1A, 0x00, 0x10, 0xA0, 0xE3, 0x07, 0x00, 0xA0, 0xE1, 0x01, 0x20, 0xA0, 0xE1
	.byte 0x10, 0x90, 0xA0, 0xE3, 0x08, 0x40, 0xA0, 0xE3, 0x01, 0x50, 0x85, 0xE2, 0x38, 0xFF, 0x2F, 0xE1
	.byte 0x00, 0x60, 0xA0, 0xE1, 0x56, 0x00, 0x00, 0xEA, 0x00, 0x00, 0x59, 0xE3, 0x08, 0x90, 0xA0, 0x03
	.byte 0x10, 0x40, 0xA0, 0xE3, 0x52, 0x00, 0x00, 0xEA
_020DA688:
	ldr r0, [sp, #4]
	cmp sb, #0
	moveq sb, #0xa
	cmp r0, #0
	bne _020DA6AC
	mov r0, fp
	mov r1, sb
	bl _u32_div_f
	str r0, [sp, #4]
_020DA6AC:
	cmp r6, #0
	blt _020DA6BC
	cmp r6, #0x80
	blt _020DA6C4
_020DA6BC:
	mov r0, #0
	b _020DA6D4
_020DA6C4:
	ldr r0, _020DA838 ; =0x020FE864
	mov r1, r6, lsl #1
	ldrh r0, [r0, r1]
	and r0, r0, #8
_020DA6D4:
	cmp r0, #0
	beq _020DA6FC
	sub r6, r6, #0x30
	cmp r6, sb
	blt _020DA784
	cmp r4, #0x10
	moveq r4, #0x20
	movne r4, #0x40
	add r6, r6, #0x30
	b _020DA7D4
_020DA6FC:
	cmp r6, #0
	blt _020DA70C
	cmp r6, #0x80
	blt _020DA714
_020DA70C:
	mov r0, #0
	b _020DA724
_020DA714:
	ldr r0, _020DA838 ; =0x020FE864
	mov r1, r6, lsl #1
	ldrh r0, [r0, r1]
	and r0, r0, #1
_020DA724:
	cmp r0, #0
	beq _020DA758
	cmp r6, #0
	blt _020DA73C
	cmp r6, #0x80
	blt _020DA744
_020DA73C:
	mov r0, r6
	b _020DA74C
_020DA744:
	ldr r0, _020DA83C ; =0x020FE7E4
	ldrb r0, [r0, r6]
_020DA74C:
	sub r0, r0, #0x37
	cmp r0, sb
	blt _020DA768
_020DA758:
	cmp r4, #0x10
	moveq r4, #0x20
	movne r4, #0x40
	b _020DA7D4
_020DA768:
	cmp r6, #0
	blt _020DA780
	cmp r6, #0x80
	bge _020DA780
	ldr r0, _020DA83C ; =0x020FE7E4
	ldrb r6, [r0, r6]
_020DA780:
	sub r6, r6, #0x37
_020DA784:
	ldr r0, [sp, #4]
	mov r4, #0x10
	cmp sl, r0
	ldrhi r0, [sp, #0x38]
	movhi r1, #1
	strhi r1, [r0]
	mul r0, sl, r9
	mov sl, r0
	sub r0, fp, r0
	cmp r6, r0
	ldrhi r0, [sp, #0x38]
	movhi r1, #1
	strhi r1, [r0]
	mov r1, #0
	mov r0, r7
	mov r2, r1
	add sl, sl, r6
	add r5, r5, #1
	blx r8
	mov r6, r0
_020DA7D4:
	ldr r0, [sp]
	cmp r5, r0
	bgt _020DA7F0
	cmp r6, fp
	beq _020DA7F0
	tst r4, #0x60
	beq _020DA51C
_020DA7F0:
	tst r4, #0x34
	bne _020DA808
	ldr r0, [sp, #0x30]
	mov sl, #0
	str sl, [r0]
	b _020DA81C
_020DA808:
	ldr r0, [sp, #8]
	sub r1, r5, #1
	add r1, r1, r0
	ldr r0, [sp, #0x30]
	str r1, [r0, #0]
_020DA81C:
	mov r0, r7
	mov r1, r6
	mov r2, #1
	blx r8
	mov r0, sl
	add sp, sp, #0xc
	ldmia sp!, {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	; .align 2, 0
_020DA838: .word 0x020FE864
_020DA83C: .word 0x020FE7E4
	arm_func_end __strtoul

	arm_func_start __strtoull
__strtoull: ; 0x020DA840
	stmfd sp!, {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x20
	ldr r4, [sp, #0x48]
	movs sb, r0
	ldr r0, [sp, #0x44]
	str r4, [sp, #0x48]
	mov r4, #0
	str r0, [sp, #0x44]
	ldr r0, [sp, #0x48]
	str r1, [sp]
	str r4, [r0, #0]
	mov r0, r4
	str r0, [sp, #0x10]
	str r0, [sp, #0x14]
	str r0, [sp, #0xc]
	ldr r0, [sp, #0x44]
	mov r1, r4
	str r1, [r0, #0]
	ldr r0, [sp, #0x40]
	str r4, [sp, #0x18]
	mov sl, r2
	str r3, [sp, #4]
	mov r6, r4
	mov r7, r4
	str r0, [sp, #0x40]
	mov r5, #1
	bmi _020DA8C8
	cmp sb, #1
	beq _020DA8C8
	cmp sb, #0x24
	bgt _020DA8C8
	ldr r0, [sp]
	cmp r0, #1
	bge _020DA8D0
_020DA8C8:
	mov r5, #0x40
	b _020DA8E4
_020DA8D0:
	mov r0, r3
	mov r2, r4
	add r6, r1, #1
	blx sl
	mov r8, r0
_020DA8E4:
	cmp sb, #0
	beq _020DA908
	mvn r0, #0
	mov r1, r0
	mov r3, sb, asr #0x1f
	mov r2, sb
	bl _ull_div
	mov r7, r0
	str r1, [sp, #0xc]
_020DA908:
	mvn r0, #0
	str r0, [sp, #0x1c]
	mov r4, #0
	b _020DAC30
_020DA918:
	cmp r5, #8
	bgt _020DA950
	cmp r5, #0
	addge pc, pc, r5, lsl #2
	b _020DAC30
_020DA92C: ; jump table
	b _020DAC30 ; case 0
	b _020DA95C ; case 1
	; b _020DAA08
	.word 0xea000033
	b _020DAC30 ; case 3
	; b _020DAA44
	.word 0xea000040
	b _020DAC30 ; case 5
	b _020DAC30 ; case 6
	b _020DAC30 ; case 7
	b _020DAA84 ; case 8
_020DA950:
	cmp r5, #0x10
	beq _020DAA84
	b _020DAC30
_020DA95C:
	.byte 0x00, 0x00, 0x58, 0xE3
	.byte 0x01, 0x00, 0x00, 0xBA, 0x80, 0x00, 0x58, 0xE3, 0x01, 0x00, 0x00, 0xBA, 0x00, 0x00, 0xA0, 0xE3
	.byte 0x03, 0x00, 0x00, 0xEA, 0x28, 0x03, 0x9F, 0xE5, 0x88, 0x10, 0xA0, 0xE1, 0xB1, 0x00, 0x90, 0xE1
	.byte 0x01, 0x0C, 0x00, 0xE2, 0x00, 0x00, 0x50, 0xE3, 0x08, 0x00, 0x00, 0x0A, 0x00, 0x10, 0xA0, 0xE3
	.byte 0x04, 0x00, 0x9D, 0xE5, 0x01, 0x20, 0xA0, 0xE1, 0x3A, 0xFF, 0x2F, 0xE1, 0x00, 0x80, 0xA0, 0xE1
	.byte 0x18, 0x00, 0x9D, 0xE5, 0x01, 0x00, 0x80, 0xE2, 0x18, 0x00, 0x8D, 0xE5, 0x9F, 0x00, 0x00, 0xEA
	.byte 0x2B, 0x00, 0x58, 0xE3, 0x06, 0x00, 0x00, 0x1A, 0x00, 0x10, 0xA0, 0xE3, 0x04, 0x00, 0x9D, 0xE5
	.byte 0x01, 0x20, 0xA0, 0xE1, 0x01, 0x60, 0x86, 0xE2, 0x3A, 0xFF, 0x2F, 0xE1, 0x00, 0x80, 0xA0, 0xE1
	.byte 0x0A, 0x00, 0x00, 0xEA, 0x2D, 0x00, 0x58, 0xE3, 0x08, 0x00, 0x00, 0x1A, 0x00, 0x10, 0xA0, 0xE3
	.byte 0x04, 0x00, 0x9D, 0xE5, 0x01, 0x20, 0xA0, 0xE1, 0x01, 0x60, 0x86, 0xE2, 0x3A, 0xFF, 0x2F, 0xE1
	.byte 0x00, 0x80, 0xA0, 0xE1, 0x44, 0x00, 0x9D, 0xE5, 0x01, 0x10, 0xA0, 0xE3, 0x00, 0x10, 0x80, 0xE5
	.byte 0x02, 0x50, 0xA0, 0xE3, 0x89, 0x00, 0x00, 0xEA, 0x00, 0x00, 0x59, 0xE3, 0x10, 0x00, 0x59, 0x13
	.byte 0x09, 0x00, 0x00, 0x1A, 0x30, 0x00, 0x58, 0xE3, 0x07, 0x00, 0x00, 0x1A, 0x00, 0x10, 0xA0, 0xE3
	.byte 0x04, 0x00, 0x9D, 0xE5, 0x01, 0x20, 0xA0, 0xE1, 0x04, 0x50, 0xA0, 0xE3, 0x01, 0x60, 0x86, 0xE2
	.byte 0x3A, 0xFF, 0x2F, 0xE1, 0x00, 0x80, 0xA0, 0xE1, 0x7C, 0x00, 0x00, 0xEA, 0x08, 0x50, 0xA0, 0xE3
	.byte 0x7A, 0x00, 0x00, 0xEA, 0x58, 0x00, 0x58, 0xE3, 0x78, 0x00, 0x58, 0x13, 0x08, 0x00, 0x00, 0x1A
	.byte 0x00, 0x10, 0xA0, 0xE3, 0x04, 0x00, 0x9D, 0xE5, 0x01, 0x20, 0xA0, 0xE1, 0x10, 0x90, 0xA0, 0xE3
	.byte 0x08, 0x50, 0xA0, 0xE3, 0x01, 0x60, 0x86, 0xE2, 0x3A, 0xFF, 0x2F, 0xE1, 0x00, 0x80, 0xA0, 0xE1
	.byte 0x6E, 0x00, 0x00, 0xEA, 0x00, 0x00, 0x59, 0xE3, 0x08, 0x90, 0xA0, 0x03, 0x10, 0x50, 0xA0, 0xE3
	.byte 0x6A, 0x00, 0x00, 0xEA
_020DAA84:
	ldr r1, [sp, #0xc]
	mov r0, #0
	cmp sb, #0
	moveq sb, #0xa
	cmp r1, r0
	cmpeq r7, r4
	bne _020DAABC
	ldr r0, [sp, #0x1c]
	mov r3, sb, asr #0x1f
	mov r1, r0
	mov r2, sb
	bl _ull_div
	mov r7, r0
	str r1, [sp, #0xc]
_020DAABC:
	cmp r8, #0
	blt _020DAACC
	cmp r8, #0x80
	blt _020DAAD4
_020DAACC:
	mov r0, #0
	b _020DAAE4
_020DAAD4:
	ldr r0, _020DACA4 ; =0x020FE864
	mov r1, r8, lsl #1
	ldrh r0, [r0, r1]
	and r0, r0, #8
_020DAAE4:
	cmp r0, #0
	beq _020DAB0C
	sub r8, r8, #0x30
	cmp r8, sb
	blt _020DAB94
	cmp r5, #0x10
	moveq r5, #0x20
	movne r5, #0x40
	add r8, r8, #0x30
	b _020DAC30
_020DAB0C:
	cmp r8, #0
	blt _020DAB1C
	cmp r8, #0x80
	blt _020DAB24
_020DAB1C:
	mov r0, #0
	b _020DAB34
_020DAB24:
	ldr r0, _020DACA4 ; =0x020FE864
	mov r1, r8, lsl #1
	ldrh r0, [r0, r1]
	and r0, r0, #1
_020DAB34:
	cmp r0, #0
	beq _020DAB68
	cmp r8, #0
	blt _020DAB4C
	cmp r8, #0x80
	blt _020DAB54
_020DAB4C:
	mov r0, r8
	b _020DAB5C
_020DAB54:
	ldr r0, _020DACA8 ; =0x020FE7E4
	ldrb r0, [r0, r8]
_020DAB5C:
	sub r0, r0, #0x37
	cmp r0, sb
	blt _020DAB78
_020DAB68:
	cmp r5, #0x10
	moveq r5, #0x20
	movne r5, #0x40
	b _020DAC30
_020DAB78:
	cmp r8, #0
	blt _020DAB90
	cmp r8, #0x80
	bge _020DAB90
	ldr r0, _020DACA8 ; =0x020FE7E4
	ldrb r8, [r0, r8]
_020DAB90:
	sub r8, r8, #0x37
_020DAB94:
	ldr r1, [sp, #0x14]
	ldr r0, [sp, #0xc]
	ldr r3, [sp, #0x10]
	cmp r1, r0
	ldr r0, [sp, #0x10]
	mov r5, sb, asr #0x1f
	cmpeq r0, r7
	ldrhi r0, [sp, #0x48]
	movhi r1, #1
	strhi r1, [r0]
	umull r0, r1, r3, sb
	mla r1, r3, r5, r1
	ldr r3, [sp, #0x14]
	str r0, [sp, #0x10]
	mla r1, r3, sb, r1
	ldr r3, [sp, #0x1c]
	mov r2, r8, asr #0x1f
	subs r3, r3, r0
	ldr r0, [sp, #0x1c]
	str r1, [sp, #0x14]
	sbc r0, r0, r1
	cmp r2, r0
	cmpeq r8, r3
	ldrhi r0, [sp, #0x48]
	movhi r1, #1
	strhi r1, [r0]
	ldr r0, [sp, #0x10]
	mov r1, #0
	adds r0, r0, r8
	str r0, [sp, #0x10]
	ldr r0, [sp, #0x14]
	mov r5, #0x10
	adc r0, r0, r2
	str r0, [sp, #0x14]
	ldr r0, [sp, #4]
	mov r2, r1
	add r6, r6, #1
	blx sl
	mov r8, r0
_020DAC30:
	ldr r0, [sp]
	cmp r6, r0
	bgt _020DAC50
	ldr r0, [sp, #0x1c]
	cmp r8, r0
	beq _020DAC50
	tst r5, #0x60
	beq _020DA918
_020DAC50:
	tst r5, #0x34
	bne _020DAC70
	mov r0, #0
	str r0, [sp, #0x10]
	str r0, [sp, #0x14]
	mov r1, r0
	ldr r0, [sp, #0x40]
	b _020DAC80
_020DAC70:
	ldr r0, [sp, #0x18]
	sub r1, r6, #1
	add r1, r1, r0
	ldr r0, [sp, #0x40]
_020DAC80:
	str r1, [r0, #0]
	ldr r0, [sp, #4]
	mov r1, r8
	mov r2, #1
	blx sl
	ldr r0, [sp, #0x10]
	ldr r1, [sp, #0x14]
	add sp, sp, #0x20
	ldmia sp!, {r4, r5, r6, r7, r8, sb, sl, pc}
	; .align 2, 0
_020DACA4: .word 0x020FE864
_020DACA8: .word 0x020FE7E4
	arm_func_end __strtoull

	arm_func_start strtoul
strtoul: ; 0x020DACAC
	stmfd sp!, {r3, r4, r5, lr}
	sub sp, sp, #0x20
	mov r5, r0
	mov lr, #0
	mov r0, r2
	mov r4, r1
	add r2, sp, #0x1c
	str r5, [sp, #0xc]
	str lr, [sp, #0x10]
	str r2, [sp]
	add r1, sp, #0x18
	str r1, [sp, #4]
	add ip, sp, #0x14
	ldr r2, _020DAD3C ; =__StringRead
	add r3, sp, #0xc
	sub r1, lr, #-0x7fffffff
	str ip, [sp, #8]
	bl __strtoul
	cmp r4, #0
	ldrne r1, [sp, #0x1c]
	addne r1, r5, r1
	strne r1, [r4]
	ldr r1, [sp, #0x14]
	cmp r1, #0
	beq _020DAD28
	ldr r0, _020DAD40 ; =0x021D0D40
	mov r1, #0x22
	str r1, [r0, #0]
	add sp, sp, #0x20
	mvn r0, #0
	ldmia sp!, {r3, r4, r5, pc}
_020DAD28:
	ldr r1, [sp, #0x18]
	cmp r1, #0
	rsbne r0, r0, #0
	add sp, sp, #0x20
	ldmia sp!, {r3, r4, r5, pc}
	; .align 2, 0
_020DAD3C: .word __StringRead
_020DAD40: .word errno
	arm_func_end strtoul

	arm_func_start strtol
strtol: ; 0x020DAD44
	stmfd sp!, {r3, r4, r5, lr}
	sub sp, sp, #0x20
	mov r5, r0
	mov lr, #0
	mov r0, r2
	mov r4, r1
	add r2, sp, #0x1c
	str r5, [sp, #0xc]
	str lr, [sp, #0x10]
	str r2, [sp]
	add r1, sp, #0x18
	str r1, [sp, #4]
	add ip, sp, #0x14
	ldr r2, _020DAE04 ; =__StringRead
	add r3, sp, #0xc
	sub r1, lr, #-0x7fffffff
	str ip, [sp, #8]
	bl __strtoul
	cmp r4, #0
	ldrne r1, [sp, #0x1c]
	addne r1, r5, r1
	strne r1, [r4]
	ldr r1, [sp, #0x14]
	cmp r1, #0
	bne _020DADD0
	ldr r2, [sp, #0x18]
	cmp r2, #0
	bne _020DADC0
	mvn r1, #0x80000000
	cmp r0, r1
	bhi _020DADD0
_020DADC0:
	cmp r2, #0
	beq _020DADF4
	cmp r0, #-0x80000000
	bls _020DADF4
_020DADD0:
	ldr r0, [sp, #0x18]
	ldr r1, _020DAE08 ; =0x021D0D40
	mov r2, #0x22
	cmp r0, #0
	movne r0, #-0x80000000
	str r2, [r1, #0]
	add sp, sp, #0x20
	mvneq r0, #0x80000000
	ldmia sp!, {r3, r4, r5, pc}
_020DADF4:
	cmp r2, #0
	rsbne r0, r0, #0
	add sp, sp, #0x20
	ldmia sp!, {r3, r4, r5, pc}
	; .align 2, 0
_020DAE04: .word __StringRead
_020DAE08: .word errno
	arm_func_end strtol

	arm_func_start atoi
atoi: ; 0x020DAE0C
	ldr ip, _020DAE1C ; =strtol
	mov r1, #0
	mov r2, #0xa
	bx ip
	; .align 2, 0
_020DAE1C: .word strtol
	arm_func_end atoi