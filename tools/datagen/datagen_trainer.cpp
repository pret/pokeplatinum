/*
 * datagen-trainer
 *
 * Usage: datagen-species <OUT_DIR> <ROOT_DIR>
 *
 * This program is responsible for generating data archives from trainer data
 * files (res/trainers/data/*.json). The file-names to be polled for data are
 * drawn from an environment var TRAINERS, which should be a semicolon-delimited
 * list of file-stems.
 *
 * The following files are generated by this program:
 *   - trdata.narc
 *   - trpoke.narc
 */
#include <cstdlib>
#include <cstring>
#include <exception>
#include <functional>

#include "datagen.h"

#define POKEPLATINUM_GENERATED_LOOKUP
#define POKEPLATINUM_GENERATED_LOOKUP_IMPL

// C++ does not like the math expressions used in this enum,
// so use the preprocessor version instead.
#include "generated/ai_flags.h"

#define POKEPLATINUM_GENERATED_ENUM

#include "constants/battle.h"
#include "generated/items.h"
#include "generated/moves.h"
#include "generated/species.h"
#include "generated/trainer_classes.h"
#include "generated/trainer_message_types.h"

#include "struct_defs/trainer_data.h"

static void PackImmediately(const rapidjson::Value &member, TrainerMonBase &base, unsigned char *bufp);
static void ParseMovesAndPack(const rapidjson::Value &member, TrainerMonBase &base, unsigned char *bufp);
static void ParseItemAndPack(const rapidjson::Value &member, TrainerMonBase &base, unsigned char *bufp);
static void ParseMovesAndItemAndPack(const rapidjson::Value &member, TrainerMonBase &base, unsigned char *bufp);

typedef std::function<void(const rapidjson::Value &member, TrainerMonBase &base, unsigned char *bufp)> TrainerMonSubparser;

struct TrainerDataTypeTable {
    TrainerMonSubparser subparser;
    std::size_t monSize;
};

static TrainerDataTypeTable sTrainerDataTypeTable[] = {
    { PackImmediately, sizeof(TrainerMonBase) },
    { ParseMovesAndPack, sizeof(TrainerMonWithMoves) },
    { ParseItemAndPack, sizeof(TrainerMonWithItem) },
    { ParseMovesAndItemAndPack, sizeof(TrainerMonWithMovesAndItem) },
};

static void Usage(std::ostream &ostr)
{
    ostr << "Usage: datagen-species OUT_DIR ROOT_DIR" << std::endl;
    ostr << std::endl;
    ostr << "Generates data archives from trainer data files (res/trainers/data/*.json)" << std::endl;
    ostr << "Trainer data files to be polled for packing are drawn from the environment var\n"
         << "TRAINERS, which must be a semicolon-delimited list of file-stems to be polled\n"
         << "at execution." << std::endl;
}

static inline bool AnyMemberHasValue(const rapidjson::Value &party, const char *key)
{
    for (const auto &member : party.GetArray()) {
        if (!member[key].IsNull()) {
            return true;
        }
    }

    return false;
}

static TrainerHeader ParseTrainerData(const rapidjson::Document &doc)
{
    TrainerHeader trdata = {};

    trdata.trainerType = LookupConst(doc["class"].GetString(), TrainerClass);
    trdata.battleType = doc["double_battle"].GetBool() ? BATTLE_TYPE_DOUBLES : 0;

    int i = 0;
    for (const auto &itemVal : doc["items"].GetArray()) {
        trdata.items[i++] = LookupConst(itemVal.GetString(), Item);
    }

    for (const auto &aiFlagsVal : doc["ai_flags"].GetArray()) {
        trdata.aiMask |= LookupConst(aiFlagsVal.GetString(), AIFlag);
    }

    const rapidjson::Value &party = doc["party"];
    trdata.partySize = party.GetArray().Size();

    bool partyItems = AnyMemberHasValue(party, "item");
    bool partyMoves = AnyMemberHasValue(party, "moves");
    if (partyItems) {
        if (partyMoves) {
            trdata.monDataType = TRDATATYPE_WITH_MOVES_AND_ITEM;
        } else {
            trdata.monDataType = TRDATATYPE_WITH_ITEM;
        }
    } else if (partyMoves) {
        trdata.monDataType = TRDATATYPE_WITH_MOVES;
    } else {
        trdata.monDataType = TRDATATYPE_BASE;
    }

    return trdata;
}

static void PackImmediately(const rapidjson::Value &member, TrainerMonBase &base, unsigned char *bufp)
{
    memcpy(bufp, &base, sizeof(base));
}

static void ParseMovesAndPack(const rapidjson::Value &member, TrainerMonBase &base, unsigned char *bufp)
{
    TrainerMonWithMoves withMoves = {};
    withMoves.dv = base.dv;
    withMoves.level = base.level;
    withMoves.species = base.species;
    withMoves.cbSeal = base.cbSeal;

    int i = 0;
    for (const auto &move : member["moves"].GetArray()) {
        withMoves.moves[i++] = LookupConst(move.GetString(), Move);
    }

    memcpy(bufp, &withMoves, sizeof(withMoves));
}

static void ParseItemAndPack(const rapidjson::Value &member, TrainerMonBase &base, unsigned char *bufp)
{
    TrainerMonWithItem withItem = {};
    withItem.dv = base.dv;
    withItem.level = base.level;
    withItem.species = base.species;
    withItem.cbSeal = base.cbSeal;

    withItem.item = LookupConst(member["item"].GetString(), Item);

    memcpy(bufp, &withItem, sizeof(withItem));
}

static void ParseMovesAndItemAndPack(const rapidjson::Value &member, TrainerMonBase &base, unsigned char *bufp)
{
    TrainerMonWithMovesAndItem withMovesAndItem = {};
    withMovesAndItem.dv = base.dv;
    withMovesAndItem.level = base.level;
    withMovesAndItem.species = base.species;
    withMovesAndItem.cbSeal = base.cbSeal;

    int i = 0;
    for (const auto &move : member["moves"].GetArray()) {
        withMovesAndItem.moves[i++] = LookupConst(move.GetString(), Move);
    }

    withMovesAndItem.item = LookupConst(member["item"].GetString(), Item);

    memcpy(bufp, &withMovesAndItem, sizeof(withMovesAndItem));
}

static void ParseAndPackParty(const rapidjson::Document &doc, TrainerDataType monDataType, std::size_t partySize, vfs_pack_ctx *trpokeVFS)
{
    if (partySize == 0) {
        unsigned char *buf = (unsigned char *)calloc(8, 1);
        narc_pack_file(trpokeVFS, buf, 8);
        return;
    }

    TrainerMonSubparser subparser = sTrainerDataTypeTable[monDataType].subparser;
    std::size_t monSize = sTrainerDataTypeTable[monDataType].monSize;
    std::size_t bufSize = monSize * partySize;
    bufSize = bufSize + (-bufSize & 3); // align to 4-byte boundary

    unsigned char *partyBuf = (unsigned char *)calloc(bufSize, 1);
    unsigned char *partyBufp = partyBuf;

    for (const auto &member : doc["party"].GetArray()) {
        TrainerMonBase base = {};
        base.dv = member["power"].GetUint();
        base.level = member["level"].GetUint();
        base.species = LookupConst(member["species"].GetString(), Species);
        base.species |= (member["form"].GetUint() << TRAINER_MON_FORM_SHIFT);
        base.cbSeal = member["ball_seal"].GetUint();

        subparser(member, base, partyBufp);
        partyBufp += monSize;
    }

    narc_pack_file(trpokeVFS, partyBuf, bufSize);
}

static int ParseMessages(const rapidjson::Document &doc)
{
    int ret = 0;
    for (const auto &member : doc["messages"].GetArray()) {
        ret |= 1 << LookupConst(member.GetString(), TrainerMessageType);
    }
    return ret;
}

int main(int argc, char **argv)
{
    if (argc == 1) {
        Usage(std::cout);
        return EXIT_SUCCESS;
    }

    fs::path outputRoot = argv[1];
    fs::path dataRoot = argv[2];

    std::vector<std::string> trainerRegistry = ReadRegistryEnvVar("TRAINERS");
    int trainerCount = trainerRegistry.size();
    int *trMsgs = new int[trainerCount];
    short *trMsgOffsets = new short[trainerCount];

    vfs_pack_ctx *trdataVFS = narc_pack_start();
    vfs_pack_ctx *trpokeVFS = narc_pack_start();
    vfs_pack_ctx *trtblVFS = narc_pack_start();
    vfs_pack_ctx *trtblofsVFS = narc_pack_start();

    rapidjson::Document doc;

    int trainerID = 0;
    for (auto &trainerStem : trainerRegistry) {
        fs::path trainerDataPath = dataRoot / (trainerStem + ".json");
        std::string json = ReadWholeFile(trainerDataPath);
        rapidjson::ParseResult ok = doc.Parse(json.c_str(), json.length());
        if (!ok) {
            ReportJsonError(ok, json, trainerDataPath);
            std::exit(EXIT_FAILURE);
        }

        try {
            TrainerHeader trdata = ParseTrainerData(doc);
            narc_pack_file_copy(trdataVFS, reinterpret_cast<unsigned char *>(&trdata), sizeof(trdata));
            ParseAndPackParty(doc, static_cast<TrainerDataType>(trdata.monDataType), trdata.partySize, trpokeVFS);
        } catch (const std::exception &e) {
            std::cerr << e.what() << std::endl;
            std::exit(EXIT_FAILURE);
        }
        trMsgs[trainerID] = ParseMessages(doc);
        trainerID++;
    }

    int order[] = {
        247,
        246,
        244,
        245,
        1,
        2,
        3,
        4,
        355,
        356,
        322,
        323,
        12,
        10,
        11,
        13,
        14,
        15,
        16,
        377,
        17,
        456,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        451,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        291,
        441,
        308,
        294,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        292,
        306,
        290,
        488,
        489,
        490,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        326,
        79,
        80,
        81,
        442,
        82,
        83,
        84,
        85,
        86,
        88,
        89,
        90,
        102,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        87,
        381,
        486,
        327,
        328,
        332,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        346,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        272,
        273,
        382,
        491,
        122,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        278,
        287,
        304,
        307,
        131,
        132,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        258,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        150,
        151,
        152,
        154,
        155,
        153,
        300,
        338,
        156,
        157,
        158,
        358,
        360,
        159,
        160,
        161,
        162,
        163,
        164,
        494,
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        274,
        172,
        173,
        174,
        175,
        176,
        177,
        178,
        179,
        180,
        337,
        333,
        335,
        467,
        347,
        492,
        359,
        361,
        181,
        182,
        482,
        183,
        184,
        185,
        186,
        187,
        188,
        189,
        190,
        191,
        192,
        193,
        194,
        195,
        196,
        197,
        198,
        199,
        200,
        201,
        202,
        203,
        204,
        205,
        395,
        206,
        398,
        207,
        208,
        209,
        210,
        211,
        212,
        213,
        214,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        222,
        223,
        224,
        225,
        226,
        227,
        228,
        229,
        230,
        231,
        444,
        233,
        234,
        235,
        236,
        237,
        265,
        329,
        240,
        241,
        242,
        243,
        250,
        232,
        256,
        257,
        279,
        283,
        314,
        367,
        295,
        298,
        299,
        296,
        297,
        248,
        249,
        275,
        276,
        366,
        363,
        364,
        365,
        336,
        334,
        315,
        348,
        324,
        259,
        260,
        316,
        293,
        401,
        339,
        483,
        497,
        498,
        351,
        352,
        353,
        354,
        317,
        309,
        310,
        311,
        312,
        318,
        266,
        280,
        284,
        325,
        330,
        340,
        343,
        357,
        319,
        268,
        269,
        270,
        271,
        349,
        350,
        320,
        281,
        285,
        301,
        302,
        303,
        331,
        341,
        344,
        277,
        282,
        286,
        288,
        289,
        305,
        313,
        362,
        342,
        345,
        371,
        369,
        431,
        368,
        460,
        465,
        370,
        414,
        415,
        406,
        410,
        411,
        412,
        413,
        421,
        422,
        423,
        424,
        553,
        530,
        531,
        533,
        529,
        534,
        532,
        372,
        378,
        388,
        392,
        445,
        452,
        453,
        457,
        503,
        504,
        505,
        506,
        379,
        380,
        383,
        443,
        450,
        454,
        455,
        458,
        459,
        496,
        373,
        386,
        389,
        390,
        393,
        394,
        396,
        397,
        399,
        400,
        446,
        447,
        499,
        500,
        554,
        555,
        557,
        558,
        559,
        560,
        563,
        564,
        565,
        566,
        567,
        568,
        573,
        574,
        575,
        576,
        577,
        578,
        583,
        585,
        587,
        588,
        591,
        592,
        593,
        594,
        595,
        596,
        597,
        598,
        599,
        600,
        601,
        602,
        603,
        604,
        605,
        556,
        561,
        562,
        569,
        570,
        571,
        572,
        579,
        580,
        581,
        582,
        584,
        586,
        589,
        590,
        606,
        437,
        438,
        439,
        440,
        433,
        434,
        435,
        436,
        461,
        462,
        463,
        464,
        376,
        432,
        466,
        487,
        493,
        501,
        502,
        416,
        405,
        419,
        426,
        420,
        427,
        408,
        417,
        418,
        425,
        409,
        507,
        508,
        428,
        509,
        510,
        511,
        429,
        512,
        513,
        430,
        514,
        522,
        515,
        516,
        517,
        518,
        519,
        520,
        523,
        524,
        525,
        526,
        470,
        471,
        472,
        473,
        474,
        475,
        476,
        477,
        478,
        479,
        480,
        481,
        261,
        262,
        263,
        264,
        267,
        817,
        818,
        819,
        820,
        821,
        822,
        823,
        824,
        825,
        765,
        766,
        767,
        768,
        769,
        770,
        706,
        707,
        708,
        703,
        704,
        705,
        712,
        713,
        714,
        645,
        646,
        647,
        718,
        719,
        720,
        627,
        628,
        629,
        683,
        684,
        653,
        654,
        655,
        656,
        657,
        658,
        709,
        710,
        711,
        633,
        634,
        635,
        630,
        631,
        632,
        639,
        640,
        641,
        642,
        643,
        644,
        721,
        722,
        723,
        651,
        652,
        687,
        688,
        681,
        682,
        774,
        776,
        659,
        660,
        636,
        637,
        746,
        747,
        748,
        695,
        696,
        729,
        730,
        731,
        691,
        692,
        693,
        701,
        702,
        732,
        733,
        734,
        736,
        737,
        738,
        743,
        744,
        745,
        715,
        716,
        717,
        724,
        725,
        726,
        771,
        772,
        773,
        775,
        749,
        750,
        673,
        674,
        677,
        678,
        689,
        690,
        664,
        665,
        669,
        670,
        751,
        752,
        755,
        756,
        699,
        648,
        649,
        753,
        754,
        757,
        758,
        685,
        694,
        663,
        668,
        650,
        686,
        740,
        741,
        727,
        728,
        742,
        759,
        760,
        762,
        763,
        661,
        675,
        679,
        777,
        638,
        662,
        666,
        667,
        671,
        672,
        676,
        680,
        700,
        735,
        739,
        761,
        764,
        778,
        536,
        550,
        545,
        546,
        542,
        543,
        539,
        535,
        548,
        540,
        552,
        544,
        538,
        547,
        541,
        551,
        549,
        537,
        843,
        827,
        828,
        831,
        829,
        830,
        832,
        844,
        845,
        846,
        521,
        527,
        528,
        407,
        848,
        849,
        847,
        403,
        404,
        835,
        836,
        837,
        838,
        839,
        840,
        841,
        842,
        697,
        698,
        850,
        851,
        852,
        913,
        880,
        881,
        882,
        908,
        874,
        875,
        876,
        906,
        877,
        878,
        879,
        907,
        883,
        884,
        885,
        909,
        886,
        887,
        888,
        910,
        889,
        890,
        891,
        911,
        894,
        895,
        896,
        912,
        897,
        898,
        899,
        900,
        901,
        892,
        893,
        921,
        922,
        858,
        857,
        859,
        854,
        860,
        853,
        856,
        855,
        865,
        861,
        863,
        862,
        864,
        926,
        927,
        902,
        903,
        904,
        905,
        866,
        867,
        868,
        869,
        870,
        871,
        872,
        873,
        916,
        914,
        915,
        917,
        918,
        919,
        920,
        // entries without messages (left out of trtbl)
        5,
        6,
        7,
        8,
        9,
        238,
        239,
        251,
        252,
        253,
        254,
        255,
        321,
        374,
        375,
        384,
        385,
        387,
        391,
        402,
        448,
        449,
        468,
        469,
        484,
        485,
        495,
        607,
        608,
        609,
        610,
        611,
        612,
        613,
        614,
        615,
        616,
        617,
        618,
        619,
        620,
        621,
        622,
        623,
        624,
        625,
        626,
        779,
        780,
        781,
        782,
        783,
        784,
        785,
        786,
        787,
        788,
        789,
        790,
        791,
        792,
        793,
        794,
        795,
        796,
        797,
        798,
        799,
        800,
        801,
        802,
        803,
        804,
        805,
        806,
        807,
        808,
        809,
        810,
        811,
        812,
        813,
        814,
        815,
        816,
        826,
        833,
        834
    };

    int msgTypeOrder[] = {
        TRMSG_FIRST_DAMAGE,
        TRMSG_ACTIVE_BATTLER_HALF_HP,
        TRMSG_LAST_BATTLER,
        TRMSG_LAST_BATTLER_HALF_HP,
        TRMSG_PRE_BATTLE,
        TRMSG_DEFEAT,
        TRMSG_POST_BATTLE,
        TRMSG_PRE_DOUBLE_BATTLE_1,
        TRMSG_DOUBLE_BATTLE_DEFEAT_1,
        TRMSG_POST_DOUBLE_BATTLE_1,
        TRMSG_DOUBLE_BATTLE_NOT_ENOUGH_POKEMON_1,
        TRMSG_DOUBLE_BATTLE_REMATCH_1,
        TRMSG_PRE_DOUBLE_BATTLE_2,
        TRMSG_DOUBLE_BATTLE_DEFEAT_2,
        TRMSG_POST_DOUBLE_BATTLE_2,
        TRMSG_DOUBLE_BATTLE_NOT_ENOUGH_POKEMON_2,
        TRMSG_DOUBLE_BATTLE_REMATCH_2,
        TRMSG_NOT_MORNING_UNUSED,
        TRMSG_NOT_NIGHT_UNUSED,
        TRMSG_REMATCH
    };
    int rematchMsgTypeOrder[] = {
        TRMSG_REMATCH,
        TRMSG_DOUBLE_BATTLE_REMATCH_1,
        TRMSG_DOUBLE_BATTLE_DEFEAT_1,
        TRMSG_DOUBLE_BATTLE_REMATCH_2,
        TRMSG_DOUBLE_BATTLE_DEFEAT_2,
        // all unused for rematch trainers, order is arbitrary
        TRMSG_FIRST_DAMAGE,
        TRMSG_ACTIVE_BATTLER_HALF_HP,
        TRMSG_LAST_BATTLER,
        TRMSG_LAST_BATTLER_HALF_HP,
        TRMSG_PRE_BATTLE,
        TRMSG_DEFEAT,
        TRMSG_POST_BATTLE,
        TRMSG_PRE_DOUBLE_BATTLE_1,
        TRMSG_POST_DOUBLE_BATTLE_1,
        TRMSG_DOUBLE_BATTLE_NOT_ENOUGH_POKEMON_1,
        TRMSG_PRE_DOUBLE_BATTLE_2,
        TRMSG_POST_DOUBLE_BATTLE_2,
        TRMSG_DOUBLE_BATTLE_NOT_ENOUGH_POKEMON_2,
        TRMSG_NOT_MORNING_UNUSED,
        TRMSG_NOT_NIGHT_UNUSED,
    };
    std::vector<char> trMsgBuffer;
    int offset = 0;
    for (int i = 0; i < trainerCount; i++) {
        int trainerID = order[i];
        if (!trMsgs[trainerID]) {
            trMsgOffsets[trainerID] = 0;
            continue;
        }
        trMsgOffsets[trainerID] = offset;
        for (int j = 0; j <= TRMSG_DOUBLE_BATTLE_REMATCH_2; j++) {
            int msgType;
            if (627 <= trainerID && trainerID <= 778) {
                msgType = rematchMsgTypeOrder[j];
            } else {
                msgType = msgTypeOrder[j];
            }

            if (trMsgs[trainerID] & 1 << msgType) {
                trMsgBuffer.push_back(trainerID & 0xFF);
                trMsgBuffer.push_back(trainerID >> 8);
                trMsgBuffer.push_back(msgType);
                trMsgBuffer.push_back(0);
                offset += 4;
            }
        }
    }

    char *a = &trMsgBuffer[0];
    narc_pack_file_copy(trtblVFS, reinterpret_cast<unsigned char *>(a), trMsgBuffer.size());
    narc_pack_file_copy(trtblofsVFS, reinterpret_cast<unsigned char *>(trMsgOffsets), trainerCount * sizeof(short));

    PackNarc(trdataVFS, outputRoot / "trdata.narc");
    PackNarc(trpokeVFS, outputRoot / "trpoke.narc");
    PackNarc(trtblVFS, outputRoot / "trtbl.narc");
    PackNarc(trtblofsVFS, outputRoot / "trtblofs.narc");
    delete[] trMsgs;
    delete[] trMsgOffsets;
    return EXIT_SUCCESS;
}
